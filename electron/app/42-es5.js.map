{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-virtual-scroll.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, f as readTask, c as writeTask, j as forceUpdate, h, H as Host, i as getElement } from './index-e806d1f6.js';\n\nconst CELL_TYPE_ITEM = 'item';\nconst CELL_TYPE_HEADER = 'header';\nconst CELL_TYPE_FOOTER = 'footer';\nconst NODE_CHANGE_NONE = 0;\nconst NODE_CHANGE_POSITION = 1;\nconst NODE_CHANGE_CELL = 2;\n\nconst MIN_READS = 2;\nconst updateVDom = (dom, heightIndex, cells, range) => {\n  // reset dom\n  for (const node of dom) {\n    node.change = NODE_CHANGE_NONE;\n    node.d = true;\n  }\n  // try to match into exisiting dom\n  const toMutate = [];\n  const end = range.offset + range.length;\n  for (let i = range.offset; i < end; i++) {\n    const cell = cells[i];\n    const node = dom.find(n => n.d && n.cell === cell);\n    if (node) {\n      const top = heightIndex[i];\n      if (top !== node.top) {\n        node.top = top;\n        node.change = NODE_CHANGE_POSITION;\n      }\n      node.d = false;\n    }\n    else {\n      toMutate.push(cell);\n    }\n  }\n  // needs to append\n  const pool = dom.filter(n => n.d);\n  for (const cell of toMutate) {\n    const node = pool.find(n => n.d && n.cell.type === cell.type);\n    const index = cell.i;\n    if (node) {\n      node.d = false;\n      node.change = NODE_CHANGE_CELL;\n      node.cell = cell;\n      node.top = heightIndex[index];\n    }\n    else {\n      dom.push({\n        d: false,\n        cell,\n        visible: true,\n        change: NODE_CHANGE_CELL,\n        top: heightIndex[index],\n      });\n    }\n  }\n  dom\n    .filter(n => n.d && n.top !== -9999)\n    .forEach(n => {\n    n.change = NODE_CHANGE_POSITION;\n    n.top = -9999;\n  });\n};\nconst doRender = (el, nodeRender, dom, updateCellHeight) => {\n  const children = Array.from(el.children).filter(n => n.tagName !== 'TEMPLATE');\n  const childrenNu = children.length;\n  let child;\n  for (let i = 0; i < dom.length; i++) {\n    const node = dom[i];\n    const cell = node.cell;\n    // the cell change, the content must be updated\n    if (node.change === NODE_CHANGE_CELL) {\n      if (i < childrenNu) {\n        child = children[i];\n        nodeRender(child, cell, i);\n      }\n      else {\n        const newChild = createNode(el, cell.type);\n        child = nodeRender(newChild, cell, i) || newChild;\n        child.classList.add('virtual-item');\n        el.appendChild(child);\n      }\n      child['$ionCell'] = cell;\n    }\n    else {\n      child = children[i];\n    }\n    // only update position when it changes\n    if (node.change !== NODE_CHANGE_NONE) {\n      child.style.transform = `translate3d(0,${node.top}px,0)`;\n    }\n    // update visibility\n    const visible = cell.visible;\n    if (node.visible !== visible) {\n      if (visible) {\n        child.classList.remove('virtual-loading');\n      }\n      else {\n        child.classList.add('virtual-loading');\n      }\n      node.visible = visible;\n    }\n    // dynamic height\n    if (cell.reads > 0) {\n      updateCellHeight(cell, child);\n      cell.reads--;\n    }\n  }\n};\nconst createNode = (el, type) => {\n  const template = getTemplate(el, type);\n  if (template && el.ownerDocument) {\n    return el.ownerDocument.importNode(template.content, true).children[0];\n  }\n  return null;\n};\nconst getTemplate = (el, type) => {\n  switch (type) {\n    case CELL_TYPE_ITEM: return el.querySelector('template:not([name])');\n    case CELL_TYPE_HEADER: return el.querySelector('template[name=header]');\n    case CELL_TYPE_FOOTER: return el.querySelector('template[name=footer]');\n  }\n};\nconst getViewport = (scrollTop, vierportHeight, margin) => {\n  return {\n    top: Math.max(scrollTop - margin, 0),\n    bottom: scrollTop + vierportHeight + margin\n  };\n};\nconst getRange = (heightIndex, viewport, buffer) => {\n  const topPos = viewport.top;\n  const bottomPos = viewport.bottom;\n  // find top index\n  let i = 0;\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] > topPos) {\n      break;\n    }\n  }\n  const offset = Math.max(i - buffer - 1, 0);\n  // find bottom index\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] >= bottomPos) {\n      break;\n    }\n  }\n  const end = Math.min(i + buffer, heightIndex.length);\n  const length = end - offset;\n  return { offset, length };\n};\nconst getShouldUpdate = (dirtyIndex, currentRange, range) => {\n  const end = range.offset + range.length;\n  return (dirtyIndex <= end ||\n    currentRange.offset !== range.offset ||\n    currentRange.length !== range.length);\n};\nconst findCellIndex = (cells, index) => {\n  const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\n  if (index === 0) {\n    return 0;\n  }\n  else if (index === max + 1) {\n    return cells.length;\n  }\n  else {\n    return cells.findIndex(c => c.index === index);\n  }\n};\nconst inplaceUpdate = (dst, src, offset) => {\n  if (offset === 0 && src.length >= dst.length) {\n    return src;\n  }\n  for (let i = 0; i < src.length; i++) {\n    dst[i + offset] = src[i];\n  }\n  return dst;\n};\nconst calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\n  const cells = [];\n  const end = len + offset;\n  for (let i = offset; i < end; i++) {\n    const item = items[i];\n    if (headerFn) {\n      const value = headerFn(item, i, items);\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_HEADER,\n          value,\n          index: i,\n          height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\n          reads: headerHeight ? 0 : MIN_READS,\n          visible: !!headerHeight,\n        });\n      }\n    }\n    cells.push({\n      i: j++,\n      type: CELL_TYPE_ITEM,\n      value: item,\n      index: i,\n      height: itemHeight ? itemHeight(item, i) : approxItemHeight,\n      reads: itemHeight ? 0 : MIN_READS,\n      visible: !!itemHeight,\n    });\n    if (footerFn) {\n      const value = footerFn(item, i, items);\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_FOOTER,\n          value,\n          index: i,\n          height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\n          reads: footerHeight ? 0 : MIN_READS,\n          visible: !!footerHeight,\n        });\n      }\n    }\n  }\n  return cells;\n};\nconst calcHeightIndex = (buf, cells, index) => {\n  let acum = buf[index];\n  for (let i = index; i < buf.length; i++) {\n    buf[i] = acum;\n    acum += cells[i].height;\n  }\n  return acum;\n};\nconst resizeBuffer = (buf, len) => {\n  if (!buf) {\n    return new Uint32Array(len);\n  }\n  if (buf.length === len) {\n    return buf;\n  }\n  else if (len > buf.length) {\n    const newBuf = new Uint32Array(len);\n    newBuf.set(buf);\n    return newBuf;\n  }\n  else {\n    return buf.subarray(0, len);\n  }\n};\nconst positionForIndex = (index, cells, heightIndex) => {\n  const cell = cells.find(c => c.type === CELL_TYPE_ITEM && c.index === index);\n  if (cell) {\n    return heightIndex[cell.i];\n  }\n  return -1;\n};\n\nconst virtualScrollCss = \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute !important;top:0 !important;right:0 !important;left:0 !important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\";\n\nconst VirtualScroll = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.range = { offset: 0, length: 0 };\n    this.viewportHeight = 0;\n    this.cells = [];\n    this.virtualDom = [];\n    this.isEnabled = false;\n    this.viewportOffset = 0;\n    this.currentScrollTop = 0;\n    this.indexDirty = 0;\n    this.lastItemLen = 0;\n    this.totalHeight = 0;\n    /**\n     * It is important to provide this\n     * if virtual item height will be significantly larger than the default\n     * The approximate height of each virtual item template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxItemHeight = 45;\n    /**\n     * The approximate height of each header template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxHeaderHeight = 30;\n    /**\n     * The approximate width of each footer template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n    this.approxFooterHeight = 30;\n    this.onScroll = () => {\n      this.updateVirtualScroll();\n    };\n  }\n  itemsChanged() {\n    this.calcCells();\n    this.updateVirtualScroll();\n  }\n  async connectedCallback() {\n    const contentEl = this.el.closest('ion-content');\n    if (!contentEl) {\n      console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n      return;\n    }\n    this.scrollEl = await contentEl.getScrollElement();\n    this.contentEl = contentEl;\n    this.calcCells();\n    this.updateState();\n  }\n  componentDidUpdate() {\n    this.updateState();\n  }\n  disconnectedCallback() {\n    this.scrollEl = undefined;\n  }\n  onResize() {\n    this.calcCells();\n    this.updateVirtualScroll();\n  }\n  /**\n   * Returns the position of the virtual item at the given index.\n   */\n  positionForItem(index) {\n    return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n  }\n  /**\n   * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n   * dirty any time the content or their style changes.\n   *\n   * The subset of items to be updated can are specifing by an offset and a length.\n   */\n  async checkRange(offset, len = -1) {\n    // TODO: kind of hacky how we do in-place updated of the cells\n    // array. this part needs a complete refactor\n    if (!this.items) {\n      return;\n    }\n    const length = (len === -1)\n      ? this.items.length - offset\n      : len;\n    const cellIndex = findCellIndex(this.cells, offset);\n    const cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n    this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n    this.lastItemLen = this.items.length;\n    this.indexDirty = Math.max(offset - 1, 0);\n    this.scheduleUpdate();\n  }\n  /**\n   * This method marks the tail the items array as dirty, so they can be re-rendered.\n   *\n   * It's equivalent to calling:\n   *\n   * ```js\n   * virtualScroll.checkRange(lastItemLen);\n   * ```\n   */\n  async checkEnd() {\n    if (this.items) {\n      this.checkRange(this.lastItemLen);\n    }\n  }\n  updateVirtualScroll() {\n    // do nothing if virtual-scroll is disabled\n    if (!this.isEnabled || !this.scrollEl) {\n      return;\n    }\n    // unschedule future updates\n    if (this.timerUpdate) {\n      clearTimeout(this.timerUpdate);\n      this.timerUpdate = undefined;\n    }\n    // schedule DOM operations into the stencil queue\n    readTask(this.readVS.bind(this));\n    writeTask(this.writeVS.bind(this));\n  }\n  readVS() {\n    const { contentEl, scrollEl, el } = this;\n    let topOffset = 0;\n    let node = el;\n    while (node && node !== contentEl) {\n      topOffset += node.offsetTop;\n      node = node.offsetParent;\n    }\n    this.viewportOffset = topOffset;\n    if (scrollEl) {\n      this.viewportHeight = scrollEl.offsetHeight;\n      this.currentScrollTop = scrollEl.scrollTop;\n    }\n  }\n  writeVS() {\n    const dirtyIndex = this.indexDirty;\n    // get visible viewport\n    const scrollTop = this.currentScrollTop - this.viewportOffset;\n    const viewport = getViewport(scrollTop, this.viewportHeight, 100);\n    // compute lazily the height index\n    const heightIndex = this.getHeightIndex();\n    // get array bounds of visible cells base in the viewport\n    const range = getRange(heightIndex, viewport, 2);\n    // fast path, do nothing\n    const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n    if (!shouldUpdate) {\n      return;\n    }\n    this.range = range;\n    // in place mutation of the virtual DOM\n    updateVDom(this.virtualDom, heightIndex, this.cells, range);\n    // Write DOM\n    // Different code paths taken depending of the render API used\n    if (this.nodeRender) {\n      doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n    }\n    else if (this.domRender) {\n      this.domRender(this.virtualDom);\n    }\n    else if (this.renderItem) {\n      forceUpdate(this);\n    }\n  }\n  updateCellHeight(cell, node) {\n    const update = () => {\n      if (node['$ionCell'] === cell) {\n        const style = window.getComputedStyle(node);\n        const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n        this.setCellHeight(cell, height);\n      }\n    };\n    if (node && node.componentOnReady) {\n      node.componentOnReady().then(update);\n    }\n    else {\n      update();\n    }\n  }\n  setCellHeight(cell, height) {\n    const index = cell.i;\n    // the cell might changed since the height update was scheduled\n    if (cell !== this.cells[index]) {\n      return;\n    }\n    if (cell.height !== height || cell.visible !== true) {\n      cell.visible = true;\n      cell.height = height;\n      this.indexDirty = Math.min(this.indexDirty, index);\n      this.scheduleUpdate();\n    }\n  }\n  scheduleUpdate() {\n    clearTimeout(this.timerUpdate);\n    this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\n  }\n  updateState() {\n    const shouldEnable = !!(this.scrollEl &&\n      this.cells);\n    if (shouldEnable !== this.isEnabled) {\n      this.enableScrollEvents(shouldEnable);\n      if (shouldEnable) {\n        this.updateVirtualScroll();\n      }\n    }\n  }\n  calcCells() {\n    if (!this.items) {\n      return;\n    }\n    this.lastItemLen = this.items.length;\n    this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n    this.indexDirty = 0;\n  }\n  getHeightIndex() {\n    if (this.indexDirty !== Infinity) {\n      this.calcHeightIndex(this.indexDirty);\n    }\n    return this.heightIndex;\n  }\n  calcHeightIndex(index = 0) {\n    // TODO: optimize, we don't need to calculate all the cells\n    this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n    this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\n    this.indexDirty = Infinity;\n  }\n  enableScrollEvents(shouldListen) {\n    if (this.rmEvent) {\n      this.rmEvent();\n      this.rmEvent = undefined;\n    }\n    const scrollEl = this.scrollEl;\n    if (scrollEl) {\n      this.isEnabled = shouldListen;\n      scrollEl.addEventListener('scroll', this.onScroll);\n      this.rmEvent = () => {\n        scrollEl.removeEventListener('scroll', this.onScroll);\n      };\n    }\n  }\n  renderVirtualNode(node) {\n    const { type, value, index } = node.cell;\n    switch (type) {\n      case CELL_TYPE_ITEM: return this.renderItem(value, index);\n      case CELL_TYPE_HEADER: return this.renderHeader(value, index);\n      case CELL_TYPE_FOOTER: return this.renderFooter(value, index);\n    }\n  }\n  render() {\n    return (h(Host, { style: {\n        height: `${this.totalHeight}px`\n      } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map(node => this.renderVirtualNode(node))))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"itemHeight\": [\"itemsChanged\"],\n    \"headerHeight\": [\"itemsChanged\"],\n    \"footerHeight\": [\"itemsChanged\"],\n    \"items\": [\"itemsChanged\"]\n  }; }\n};\nconst VirtualProxy = ({ dom }, children, utils) => {\n  return utils.map(children, (child, i) => {\n    const node = dom[i];\n    const vattrs = child.vattrs || {};\n    let classes = vattrs.class || '';\n    classes += 'virtual-item ';\n    if (!node.visible) {\n      classes += 'virtual-loading';\n    }\n    return Object.assign(Object.assign({}, child), { vattrs: Object.assign(Object.assign({}, vattrs), { class: classes, style: Object.assign(Object.assign({}, vattrs.style), { transform: `translate3d(0,${node.top}px,0)` }) }) });\n  });\n};\nVirtualScroll.style = virtualScrollCss;\n\nexport { VirtualScroll as ion_virtual_scroll };\n"],"sourceRoot":"webpack:///","file":"42-es5.js"}